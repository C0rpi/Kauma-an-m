from util.kauma_util import json_parser
import json
import base64
from Aufgabe3.CZPoly import CZPoly
from Aufgabe3.poly import Poly
#g = CZPoly([[1, 2, 4, 6, 7, 10, 13, 17, 19, 21, 23, 26, 27, 29, 30, 32, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 65, 66, 67, 69, 72, 73, 79, 83, 85, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 103, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 124, 125, 126], [3, 6, 7, 10, 11, 12, 13, 14, 15, 25, 28, 31, 32, 33, 37, 39, 41, 42, 43, 44, 45, 47, 49, 53, 57, 59, 60, 63, 67, 69, 71, 72, 73, 75, 77, 79, 84, 89, 90, 91, 93, 95, 98, 99, 101, 102, 104, 105, 106, 109, 110, 113, 116, 117, 119, 120, 122, 123, 125, 126, 127], [0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 19, 21, 22, 23, 24, 25, 28, 29, 34, 35, 36, 37, 40, 46, 47, 52, 54, 55, 56, 59, 66, 69, 72, 73, 74, 76, 77, 78, 79, 80, 82, 85, 89, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 110, 112, 116, 119, 124, 126], [0, 1, 3, 4, 5, 6, 7, 8, 11, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 35, 36, 38, 41, 42, 44, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 60, 64, 68, 73, 74, 77, 82, 83, 84, 85, 86, 90, 91, 93, 95, 98, 100, 101, 102, 105, 108, 110, 111, 112, 114, 117, 120, 122, 123, 124, 126, 127]])
#p = CZPoly([[1, 2, 4, 6, 7, 10, 13, 17, 19, 21, 23, 26, 27, 29, 30, 32, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 65, 66, 67, 69, 72, 73, 79, 83, 85, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 103, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 124, 125, 126], [3, 6, 7, 10, 11, 12, 13, 14, 15, 25, 28, 31, 32, 33, 37, 39, 41, 42, 43, 44, 45, 47, 49, 53, 57, 59, 60, 63, 67, 69, 71, 72, 73, 75, 77, 79, 84, 89, 90, 91, 93, 95, 98, 99, 101, 102, 104, 105, 106, 109, 110, 113, 116, 117, 119, 120, 122, 123, 125, 126, 127], [0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 19, 21, 22, 23, 24, 25, 28, 29, 34, 35, 36, 37, 40, 46, 47, 52, 54, 55, 56, 59, 66, 69, 72, 73, 74, 76, 77, 78, 79, 80, 82, 85, 89, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 110, 112, 116, 119, 124, 126], [0, 1, 3, 4, 5, 6, 7, 8, 11, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 35, 36, 38, 41, 42, 44, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 60, 64, 68, 73, 74, 77, 82, 83, 84, 85, 86, 90, 91, 93, 95, 98, 100, 101, 102, 105, 108, 110, 111, 112, 114, 117, 120, 122, 123, 124, 126, 127]])
##print(p.gcd(g))
a = CZPoly([Poly(base64.b64decode("ukJiJigw0LA1N7HpPtxNZw==")),Poly([0])])
b = CZPoly([Poly(base64.b64decode("lDhGiu/iEZE1j48bvp8iUQ==")),Poly([0])])
c = CZPoly([Poly(base64.b64decode("uDtTNwi/U10KpuUpgNU7eA==")),Poly([0])])
d = CZPoly([Poly(base64.b64decode("8ivENuXNQR0IIJdbxXtU2w==")),Poly([0])])
mask = "MkcYSzxPaaRNvNIoh7u0GA=="
tag = "nJ74K5iQJh6e06K/VENJZw=="
res = "rtngYKTfT7rTb3CX0/j9fw=="
#mask = "A9CpvhiK44fKXY+zTCp6BQ=="
#tag = "uU5qgpx37Yrs4yFs1Z3LgA=="
mask = CZPoly([Poly(base64.b64decode(mask)),Poly([0])])
tag = CZPoly([Poly(base64.b64decode(tag)),Poly([0])])
res = CZPoly([Poly(base64.b64decode(res)),Poly([0])])
print(f"mask: {mask}\n\ntag: {tag}\n\nres: {res}")
print(a)
print(b)
print(c)
print(d)
#print(a*b*c*d)
#print(c)
#print()

#
#
#
#important example where gcd fails
#p = CZPoly([[3, 4, 6, 7, 19, 20, 22, 23, 24, 26, 27, 30, 31, 34, 37, 38, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 54, 56, 60, 62, 65, 67, 68, 69, 70, 71, 73, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 98, 100, 103, 104, 105, 106, 109, 110, 111, 113, 114, 116, 117, 118, 119, 122, 123, 124, 127], [], [0, 1, 2, 4, 5, 13, 14, 21, 23, 25, 27, 34, 35, 36, 38, 41, 42, 45, 46, 48, 50, 53, 54, 56, 57, 58, 59, 60, 64, 65, 70, 74, 79, 81, 85, 86, 87, 88, 95, 96, 97, 99, 103, 104, 106, 109, 110, 111, 113, 114, 115, 117, 119, 122, 123, 125, 127], [1, 2, 5, 9, 10, 12, 14, 16, 18, 19, 22, 23, 24, 26, 28, 29, 31, 34, 36, 38, 40, 42, 48, 49, 51, 54, 55, 57, 58, 63, 70, 74, 75, 76, 77, 78, 81, 84, 85, 88, 96, 97, 101, 103, 104, 105, 106, 108, 109, 111, 120, 123, 125, 127], [0]])
#g = CZPoly([[0, 1, 5, 6, 7, 8, 10, 15, 18, 19, 21, 22, 23, 26, 27, 30, 31, 36, 37, 39, 40, 45, 47, 51, 53, 61, 62, 64, 69, 70, 74, 75, 78, 82, 83, 85, 87, 91, 94, 96, 100, 106, 107, 114, 117, 120, 121, 122, 123, 127], [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 15, 16, 20, 21, 22, 26, 27, 28, 29, 34, 36, 37, 41, 42, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 66, 68, 69, 73, 74, 75, 76, 79, 80, 82, 84, 85, 86, 88, 90, 93, 94, 95, 96, 97, 100, 101, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 120, 121, 122, 124, 125, 127], [0, 2, 4, 5, 7, 10, 12, 13, 14, 16, 18, 22, 25, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 55, 56, 58, 59, 60, 62, 64, 65, 68, 69, 70, 71, 73, 75, 78, 79, 80, 82, 85, 86, 87, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 105, 107, 109, 111, 112, 117, 118, 119, 120, 122], [0, 1, 2, 5, 8, 9, 12, 14, 16, 20, 21, 23, 25, 32, 34, 36, 37, 38, 39, 44, 47, 48, 49, 50, 51, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 70, 72, 73, 77, 81, 82, 83, 84, 86, 87, 90, 91, 98, 101, 102, 104, 109, 110, 114, 118, 120, 123, 126, 127]])
#print(p.gcd(g))
#
#
#

file = "Aufgabe3/test/gcmrecover.json"
with open(file) as f: inp = json.loads(f.read())['result']
out = json_parser(file)
print(out)
print(inp)
assert json.loads(out)['result'] == inp
